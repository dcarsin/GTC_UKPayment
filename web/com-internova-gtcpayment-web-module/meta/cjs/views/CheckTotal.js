"use strict";var __extends=this&&this.__extends||function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function __(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(__.prototype=r.prototype,new __)}}(),__decorate=this&&this.__decorate||function(e,t,r,n){var o,a=arguments.length,i=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,n);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(i=(a<3?o(i):a>3?o(t,r,i):o(t,r))||i);return a>3&&i&&Object.defineProperty(t,r,i),i},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},__awaiter=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,a){function fulfilled(e){try{step(n.next(e))}catch(t){a(t)}}function rejected(e){try{step(n.throw(e))}catch(t){a(t)}}function step(e){e.done?o(e.value):function adopt(e){return e instanceof r?e:new r(function(t){t(e)})}(e.value).then(fulfilled,rejected)}step((n=n.apply(e,t||[])).next())})},__generator=this&&this.__generator||function(e,t){var r,n,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function verb(a){return function(c){return function step(a){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,n=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(c){a=[6,c],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.CheckTotal=void 0;var AbstractView_1=require("sabre-ngv-app/app/AbstractView"),LayerService_1=require("sabre-ngv-core/services/LayerService"),Template_1=require("sabre-ngv-core/decorators/classes/view/Template"),IAreaService_1=require("sabre-ngv-app/app/services/impl/IAreaService"),SabreController_1=require("../controllers/SabreController"),ISoapApiService_1=require("sabre-ngv-communication/interfaces/ISoapApiService"),Context_1=require("../Context"),XML2JS=require("xml2js"),remark_1=require("../model/remark"),CheckTotal=function(e){function CheckTotal(t,r){var n=e.call(this,t)||this;return n.rmks=[],n.createRmks=[],n.processData(r),console.log("rmks",n.rmks),console.log("createRmks",n.createRmks),n.getModel().set("total",r.total),n.render(),n}return __extends(CheckTotal,e),CheckTotal.prototype.initialize=function(t){e.prototype.initialize.call(this,t)},CheckTotal.prototype.processData=function(e){this.rmks=e.UpdateRmk;var t=e.option;this.rmks.filter(function(e){return"CM"==e.Code})[0].Text="CM-"+e.ccCode+e.card4+"/"+e.expMonth+e.expYear+"/*",this.rmks.filter(function(e){return"PAY"==e.Code})[0].Text="PAYMENT/123456/"+e.refId+"/"+e.total;this.generateRmk("PAYMENT/"+t+"123456/"+e.refId+"/"+e.total+"/"+e.ccCode+e.card4);var r="";e.markUpFee&&(r="M"+e.markUpFee),e.fee&&(r=r+"/S"+e.fee),e.pqAmt&&(r=r+"/T"+e.pqAmt),e.additional&&(r=r+"/A"+e.additional),e.total&&(r=r+"/TT"+e.total),this.generateRmk(r)},CheckTotal.prototype.selfNextAction=function(){return __awaiter(this,void 0,void 0,function(){var e,t,r,n,o,a,i=this;return __generator(this,function(c){return e=(0,Context_1.getService)(IAreaService_1.IAreaService),t=(0,Context_1.getService)(SabreController_1.SabreController),console.log("getreservationpromise",t),t.RemarkUpdate(this.rmks).then(function(r){console.log("Rmks to update",i.rmks),t.SendCommandMessage("*.",!0,!0).then(function(r){console.log("remarks been displayed"),t.buildRequestAddRemark(i.createRmks).then(function(r){e.showBanner("Success","Remarks were added"),t.SendCommandMessage("*P5H",!0,!0).then(function(e){console.log("remarks been displayed")})})}),e.showBanner("Success","Remarks were updated")}),(0,Context_1.getService)(LayerService_1.LayerService).clearLayer(),r=this.$(".action-field").find(".action").val(),n=this.$(".authTokenType-field").find(".authTokenType").val(),o=this.$(".timeout-field").find(".timeout").val(),a=this.$(".payload-field").find(".payload").val(),this.$(".response").val(""),(0,Context_1.getService)(ISoapApiService_1.ISoapApiService).callSws({action:r,payload:a,authTokenType:n,timeout:o}).then(function(e){return __awaiter(i,void 0,void 0,function(){var t,r;return __generator(this,function(n){switch(n.label){case 0:return e.errorCode?(r=e,[3,3]):[3,1];case 1:return[4,this.parseXml2Js(e.value)];case 2:r=n.sent(),n.label=3;case 3:return t=r,this.$(".response").val(JSON.stringify(t,null,2)),[2]}})})}).catch(function(e){i.$(".response").val(e)}),e.showBanner("Success","Remarks were added!: "+this.adflexRef),(0,Context_1.getService)(LayerService_1.LayerService).clearLayer(),[2]})})},CheckTotal.prototype.parseXml2Js=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(t){return[2,new Promise(function(t,r){XML2JS.parseString(e,function(e,n){e?r(e):t(n)})})]})})},CheckTotal.prototype.generateRmk=function(e){var t=new remark_1.remark;t.Type="Historical",t.Text=e,this.createRmks.push(t)},CheckTotal=__decorate([(0,Template_1.Template)("com-internova-gtcpayment-web-module:CheckTotal"),__metadata("design:paramtypes",[Object,Object])],CheckTotal)}(AbstractView_1.AbstractView);exports.CheckTotal=CheckTotal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64, 