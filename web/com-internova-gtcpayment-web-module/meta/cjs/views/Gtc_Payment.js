"use strict";var __extends=this&&this.__extends||function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(t,r)};return function(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function __(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(__.prototype=r.prototype,new __)}}(),__decorate=this&&this.__decorate||function(e,t,r,a){var n,o=arguments.length,i=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,r):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(i=(o<3?n(i):o>3?n(t,r,i):n(t,r))||i);return o>3&&i&&Object.defineProperty(t,r,i),i},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},__awaiter=this&&this.__awaiter||function(e,t,r,a){return new(r||(r=Promise))(function(n,o){function fulfilled(e){try{step(a.next(e))}catch(t){o(t)}}function rejected(e){try{step(a.throw(e))}catch(t){o(t)}}function step(e){e.done?n(e.value):function adopt(e){return e instanceof r?e:new r(function(t){t(e)})}(e.value).then(fulfilled,rejected)}step((a=a.apply(e,t||[])).next())})},__generator=this&&this.__generator||function(e,t){var r,a,n,o,i={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function verb(o){return function(l){return function step(o){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,a&&(n=2&o[0]?a.return:o[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,o[1])).done)return n;switch(a=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,a=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(n=(n=i.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){i.label=o[1];break}if(6===o[0]&&i.label<n[1]){i.label=n[1],n=o;break}if(n&&i.label<n[2]){i.label=n[2],i.ops.push(o);break}n[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(l){o=[6,l],a=0}finally{r=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Gtc_Payment=void 0;var AbstractView_1=require("sabre-ngv-app/app/AbstractView"),LayerService_1=require("sabre-ngv-core/services/LayerService"),Template_1=require("sabre-ngv-core/decorators/classes/view/Template"),pqFare_1=require("../model/pqFare"),ccData_1=require("../model/ccData"),IAreaService_1=require("sabre-ngv-app/app/services/impl/IAreaService"),RestModel_1=require("../model/RestModel"),Context_1=require("../Context"),CheckTotal_1=require("./CheckTotal"),remark_1=require("../model/remark"),SabreController_1=require("../controllers/SabreController"),Gtc_Payment=function(e){function Gtc_Payment(t,r){var a=e.call(this,t)||this;return a.status=[],a.vendors=[{code:"AX"},{code:"VI"},{code:"CA"}],a.totalPax=0,a.updateRmks=[],a.pqFareList=[],a.creditCardList=[],a.getReservation(r),a}return __extends(Gtc_Payment,e),Gtc_Payment.prototype.initialize=function(t){e.prototype.addDomEvents.call(this,{"change #selectPq":"loadAmount","change #creditCards":"loadExpiration","change #markUpFee":"updateTotal","change #amt":"updateTotal","change #additional":"updateTotal","change #tktFee":"updateTotal"}),e.prototype.initialize.call(this,t)},Gtc_Payment.prototype.getReservation=function(e){var t,r,a,n,o=this;(0,Context_1.getService)(SabreController_1.SabreController);if(e){var i=e.Data,l=null===(t=null==e?void 0:e.Data)||void 0===t?void 0:t.RecordLocators[0].Id,d=i.Passengers.Passenger.length;this.totalPax=d;var s,c,u,m=new Date,p=m.getFullYear().toString(),v=m.getMonth()+1,f=m.getDate(),h=f<10?"0"+f.toString():f.toString(),y=v<10?"0"+v.toString():v.toString(),g=l+p[2]+p[3]+y+h,_="",I=0,x=0,k=i.Passengers.Passenger[0].GivenName+" "+i.Passengers.Passenger[0].Surname;if(null===(r=i.PriceQuotes)||void 0===r?void 0:r.PriceQuote)(u=i.PriceQuotes.PriceQuote).length&&u.forEach(function(e){if("GBP"==e.Taxes.TotalTax.Currency){var t=new pqFare_1.pqFare,r=e.Id.toString();t.item=r[r.length-1],t.total=e.Total.Amount.Amount,t.taxes=e.Taxes.TotalTax.Amount,o.pqFareList.push(t)}});if(null===(a=i.FormOfPayments)||void 0===a?void 0:a.FormOfPayment)(u=i.FormOfPayments.FormOfPayment).length&&u.forEach(function(e){var t=new ccData_1.ccData;if(t.code=e.CreditCard.CreditCardCode,t.cardMasked=t.code+e.CreditCard.CreditCardNumber,t.cardMasked){for(var r="",a=t.cardMasked.length-4;a<t.cardMasked.length;a++)r+=t.cardMasked[a].toString();t.last4=r}t.year=e.CreditCard.ExpirationYear[2]+e.CreditCard.ExpirationYear[3],t.month=e.CreditCard.ExpirationMonth,o.creditCardList.push(t)});if(null===(n=i.Remarks)||void 0===n?void 0:n.Remark){var E=i.Remarks.Remark;E.length&&E.forEach(function(e){if("Invoice"==e.Type){var t=e.Text.split("MKUP/");if(t[1]){var r=t[1].split("/");s=r[1],I+=parseFloat(s)}var a,n=e.Text.split("TKTFEE/");if(n[1]?c=n[1]:(n=e.Text.split("FEE/"))[1]&&(_=n[1]),e.Text.split("CM-")[1])(a=new remark_1.remark).Type="Itinerary",a.Id=e.Source.Id.toString(),a.Text=e.Text,a.Code="CM",o.updateRmks.push(a);if(e.Text.split("PAYMENT/")[1])(a=new remark_1.remark).Type="Itinerary",a.Id=e.Source.Id.toString(),a.Text=e.Text,a.Code="PAY",o.updateRmks.push(a)}})}c&&(x=d*parseFloat(c)),_&&(x=parseFloat(_));var b=I+x;this.getModel().set("markUpFee",I.toFixed(2)),this.getModel().set("tktFee",x.toFixed(2)),this.getModel().set("selectPq",this.pqFareList),this.getModel().set("creditCards",this.creditCardList),this.getModel().set("name",k),this.getModel().set("refId",g),this.getModel().set("total",b.toFixed(2)+" GBP"),this.getModel().set("vendors",this.vendors),this.render()}else{(0,Context_1.getService)(IAreaService_1.IAreaService).showBanner("Error","There is no active PNR..."),(0,Context_1.getService)(LayerService_1.LayerService).clearLayer()}},Gtc_Payment.prototype.loadAmount=function(e){var t=this,r=this.$("#selectPq").children("option:selected").val();e.target&&(this.pqFareList.forEach(function(e){e.item==r&&(document.getElementById("amt").value=e.total.toString(),t.updateTotal())}),$("#selectPq").val(r))},Gtc_Payment.prototype.loadExpiration=function(e){var t=this.$("#creditCards").children("option:selected").val();e.target&&(this.creditCardList.forEach(function(e){if(e.cardMasked==t){document.getElementById("cardInUse").value=t;var r=e.month+"/"+e.year;document.getElementById("expiration").value=r}}),$("#creditCards").val(t));var r=document.getElementById("cardInUse");"addCC"==t?(document.getElementById("cardInUse").value="",document.getElementById("expiration").value="",document.getElementById("vendor").removeAttribute("disabled"),r.removeAttribute("disabled")):r.setAttribute("disabled","")},Gtc_Payment.prototype.updateTotal=function(e){var t=0,r=0,a=0,n=0;document.getElementById("markUpFee").value&&(t=parseFloat(document.getElementById("markUpFee").value),document.getElementById("markUpFee").value=t.toFixed(2)),document.getElementById("amt").value&&(r=parseFloat(document.getElementById("amt").value),document.getElementById("amt").value=r.toFixed(2)),document.getElementById("additional").value&&(a=parseFloat(document.getElementById("additional").value),document.getElementById("additional").value=a.toFixed(2)),document.getElementById("tktFee").value&&(n=parseFloat(document.getElementById("tktFee").value),document.getElementById("tktFee").value=n.toFixed(2));var o=t+r+a+n;document.getElementById("total").value=o.toFixed(2)+" GBP"},Gtc_Payment.prototype.selfNextAction=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return this.InputValidator()&&this.execute(),[2]})})},Gtc_Payment.prototype.execute=function(){var e,t=document.getElementById("markUpFee").value,r=document.getElementById("name").value,a=document.getElementById("tktFee").value,n=document.getElementById("amt").value,o=document.getElementById("additional").value,i=document.getElementById("total").value,l=this.$("#creditCards").children("option:selected").val(),d=this.$("#test").children("option:selected").val(),s="";if("addCC"==l){e=this.$("#vendor").children("option:selected").val();for(var c=(l=document.getElementById("cardInUse").value).length-4;c<l.length;c++)s+=l[c].toString()}else{var u=this.creditCardList.filter(function(e){return e.cardMasked==l});s=u[0].last4,e=u[0].code}var m=document.getElementById("refId").value,p=document.getElementById("expiration").value,v=p.split("/")[0],f=p.split("/")[1],h={markUpFee:t,fee:a,name:r,pqAmt:n,additional:o,total:i,fullCard:l,expMonth:v,expYear:f,card4:s,option:d,ccCode:e,refId:m,UpdateRmk:this.updateRmks};console.log("pack",h);(0,Context_1.getService)(LayerService_1.LayerService).showInModal(new CheckTotal_1.CheckTotal({model:new RestModel_1.RestModel},h),{title:"Confirmation",actions:[{className:"app.common.views.Button",caption:"Cancel",actionName:"cancel",type:"secondary"},{className:"app.common.views.Button",caption:"Back",actionName:"back",type:"secondary"},{className:"app.common.views.Button",caption:"Add Remarks",actionName:"next",type:"success"}]},{display:"areaView"})},Gtc_Payment.prototype.InputValidator=function(){var e=!0,t=document.getElementById("total").value;if(parseFloat(t.split("GBP")[0])>0){this.fieldOk("total");for(var r=document.querySelectorAll("[required]"),a=0;a<r.length;a++){var n=r[a].id,o=document.getElementById(n).value;if("creditCards"==n&&"ccNoSelected"==o){this.errorOnField(n,"Field cannot be empty or blank"),e=!1;break}if("creditCards"==n&&"addCC"==o){if(1==this.status.creditCards&&this.fieldOk("creditCards"),"noVendor"==document.getElementById("vendor").value){this.status.vendor=!0,this.errorOnField("vendor","Select one"),e=!1;break}this.fieldOk("vendor");var i=document.getElementById("cardInUse").value;if(16==i.length&&1==this.status.cardInUse)this.fieldOk("cardInUse");else{if(i.length>16){this.errorOnField("cardInUse","Maximum 16 numbers"),e=!1;break}if(i.length<=15){this.status.cardInUse=!0,this.errorOnField("cardInUse","Minimum 16 numbers"),e=!1;break}}}else if("name"==n){var l=document.getElementById("name").value;if(!l){this.errorOnField("name","Name is mandatory"),e=!1;break}l&&1==this.status.name&&this.fieldOk("creditCards")}else if("name"==n){var d=document.getElementById("name").value;if(!d){this.errorOnField("name","Name is mandatory"),e=!1;break}d&&1==this.status.name&&this.fieldOk("creditCards")}else if("expiration"==n){if(!document.getElementById("expiration").value){this.errorOnField("expiration","Expiration is mandatory"),e=!1;break}var s=new Date,c=s.getFullYear().toString(),u=s.getMonth()+1,m=parseFloat(c[2]+c[3]),p=document.getElementById("expiration").value,v=parseFloat(p.split("/")[0]),f=parseFloat(p.split("/")[1]);if(isNaN(v)||isNaN(f)||v>12||v<1||f<m||f==m&&v<u){this.errorOnField("expiration","MM/YY like: 05/27"),e=!1;break}this.fieldOk("expiration")}}}else this.errorOnField("total","Must be greater than 0"),e=!1;return e},Gtc_Payment.prototype.errorOnField=function(e,t){document.getElementById(e+"Error").innerText=t,document.getElementById(e+"Div").classList.add("has-error"),document.getElementById(e).focus(),this.status[e]=!0},Gtc_Payment.prototype.fieldOk=function(e){1==this.status[e]&&(document.getElementById(e+"Div").classList.remove("has-error"),document.getElementById(e+"Error").innerText="",this.status[e]=!1)},Gtc_Payment=__decorate([(0,Template_1.Template)("com-internova-gtcpayment-web-module:Gtc_Payment"),__metadata("design:paramtypes",[Object,Object])],Gtc_Payment)}(AbstractView_1.AbstractView);exports.Gtc_Payment=Gtc_Payment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64, 