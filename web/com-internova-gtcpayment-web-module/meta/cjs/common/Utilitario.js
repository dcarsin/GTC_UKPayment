"use strict";var __extends=this&&this.__extends||function(){var t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function __(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(__.prototype=r.prototype,new __)}}();Object.defineProperty(exports,"__esModule",{value:!0}),exports.Utilitario=void 0;var AbstractService_1=require("sabre-ngv-app/app/services/impl/AbstractService"),ExternalService_1=require("../services/ExternalService"),XmlPayLoads_1=require("./XmlPayLoads"),Context_1=require("../Context"),Utilitario=function(t){function Utilitario(){return null!==t&&t.apply(this,arguments)||this}return __extends(Utilitario,t),Utilitario.prototype.GetPayLoad=function(t){return new Promise(function(e,r){var i=XmlPayLoads_1.XmlPayLoads.items[t];i&&i.length?e(i):r("")})},Utilitario.prototype.GetXPathResult=function(t,e,r,i){var o=(new DOMParser).parseFromString(t,"text/xml");return o.evaluate(e,o,r,i,null)},Utilitario.prototype.IsMatch=function(t,e){return new RegExp(e).test(t)},Utilitario.prototype.GetValue=function(t,e,r){for(var i,o="";null!==(i=e.exec(t));)i.index===e.lastIndex&&e.lastIndex++,i.forEach(function(t,e){e===r&&(o=t)});return o},Utilitario.prototype.GetValues=function(t,e,r){for(var i,o=[];null!==(i=e.exec(t));)i.index===e.lastIndex&&e.lastIndex++,i.forEach(function(t,e){e===r&&o.push(t)});return o},Utilitario.prototype.RemoveNameSpace=function(t){return t=t.replace(/xmlns=\"(.*?)\"/g,"")},Utilitario.prototype.GetPayLoadInfo=function(t){return new Promise(function(e,r){(0,Context_1.getService)(ExternalService_1.ExternalService).sendRequest("GET",t).then(function(t){e(t)}).catch(function(t){console.error("err.statusText:",t.statusText),r(t)})})},Utilitario.prototype.StringToXml=function(t){return(new DOMParser).parseFromString(t,"text/xml")},Utilitario.prototype.DocumentToString=function(t){return(new XMLSerializer).serializeToString(t)},Utilitario.SERVICE_NAME="com-internova-gtcpayment-web-module-Utilitario",Utilitario}(AbstractService_1.AbstractService);exports.Utilitario=Utilitario;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb2RlL2NvbW1vbi9VdGlsaXRhcmlvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI0bEJBQ0EsSUFBQSxrQkFBQSxRQUFBLG1EQUNBLGtCQUFBLFFBQUEsK0JBQ0EsY0FBQSxRQUFBLGlCQUNBLFVBQUEsUUFBQSxjQUVBLFdBQUEsU0FBQSxHQUFBLFNBQUEsNERBMEZBLE9BMUZnQyxVQUFBLFdBQUEsR0FHNUIsV0FBQSxVQUFBLFdBQUEsU0FBVyxHQUNQLE9BQU8sSUFBSSxRQUFnQixTQUFDLEVBQVMsR0FDakMsSUFBTSxFQUFhLGNBQUEsWUFBWSxNQUFNLEdBRWpDLEdBQU0sRUFBRyxPQUNULEVBQVEsR0FFUixFQUFPLE9BS25CLFdBQUEsVUFBQSxlQUFBLFNBQWUsRUFBa0IsRUFBb0IsRUFBc0IsR0FDdkUsSUFBSSxHQUFNLElBQUksV0FBWSxnQkFBZ0IsRUFBVSxZQUVwRCxPQURhLEVBQUksU0FBUyxFQUFZLEVBQUssRUFBaUIsRUFBTSxPQUl0RSxXQUFBLFVBQUEsUUFBQSxTQUFRLEVBQW1CLEdBRXZCLE9BRFMsSUFBSSxPQUFPLEdBQ1YsS0FBSyxJQUduQixXQUFBLFVBQUEsU0FBQSxTQUFTLEVBQW1CLEVBQWUsR0FJdkMsSUFIQSxJQUNJLEVBREEsRUFBc0IsR0FHYSxRQUEvQixFQUFJLEVBQU0sS0FBSyxLQUNmLEVBQUUsUUFBVSxFQUFNLFdBQ2xCLEVBQU0sWUFFVixFQUFFLFFBQVEsU0FBQyxFQUFPLEdBQ1YsSUFBZSxJQUNmLEVBQWMsS0FLMUIsT0FBTyxHQUdYLFdBQUEsVUFBQSxVQUFBLFNBQVUsRUFBbUIsRUFBZSxHQUl4QyxJQUhBLElBQ0ksRUFEQSxFQUFTLEdBRzBCLFFBQS9CLEVBQUksRUFBTSxLQUFLLEtBQ2YsRUFBRSxRQUFVLEVBQU0sV0FDbEIsRUFBTSxZQUVWLEVBQUUsUUFBUSxTQUFDLEVBQU8sR0FDVixJQUFlLEdBQ2YsRUFBTyxLQUFLLEtBSXhCLE9BQU8sR0FHWCxXQUFBLFVBQUEsZ0JBQUEsU0FBZ0IsR0FFWixPQURBLEVBQVUsRUFBUSxRQUFRLG1CQUFvQixLQUlsRCxXQUFBLFVBQUEsZUFBQSxTQUFlLEdBQ1gsT0FBTyxJQUFJLFFBQWdCLFNBQUMsRUFBUyxJQUNqQyxFQUFBLFVBQUEsWUFBVyxrQkFBQSxpQkFBaUIsWUFBWSxNQUFPLEdBQzFDLEtBQUssU0FBVSxHQUVaLEVBQVEsS0FFWCxNQUFNLFNBQVUsR0FDYixRQUFRLE1BQU0sa0JBQW1CLEVBQUksWUFDckMsRUFBTyxRQUt2QixXQUFBLFVBQUEsWUFBQSxTQUFZLEdBRVIsT0FEVSxJQUFJLFdBQVksZ0JBQWdCLEVBQVEsYUFJdEQsV0FBQSxVQUFBLGlCQUFBLFNBQWlCLEdBRWIsT0FEa0IsSUFBSSxlQUFnQixrQkFBa0IsSUFyRnJELFdBQUEsYUFBdUIsaURBeUZsQyxXQTFGQSxDQUFnQyxrQkFBQSxpQkFBbkIsUUFBQSxXQUFBIiwiZmlsZSI6IlV0aWxpdGFyaW8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVXRpbGl0YXJpbyB9IGZyb20gXCIuL0lVdGlsaXRhcmlvXCI7XHJcbmltcG9ydCB7IEFic3RyYWN0U2VydmljZSB9IGZyb20gXCJzYWJyZS1uZ3YtYXBwL2FwcC9zZXJ2aWNlcy9pbXBsL0Fic3RyYWN0U2VydmljZVwiO1xyXG5pbXBvcnQgeyBFeHRlcm5hbFNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvRXh0ZXJuYWxTZXJ2aWNlXCI7XHJcbmltcG9ydCB7IFhtbFBheUxvYWRzIH0gZnJvbSBcIi4vWG1sUGF5TG9hZHNcIjtcclxuaW1wb3J0IHsgZ2V0U2VydmljZSwgY2YsIGNvbnRleHQgfSBmcm9tIFwiLi4vQ29udGV4dFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFV0aWxpdGFyaW8gZXh0ZW5kcyBBYnN0cmFjdFNlcnZpY2UgaW1wbGVtZW50cyBJVXRpbGl0YXJpbyB7XHJcbiAgICBzdGF0aWMgU0VSVklDRV9OQU1FOiBzdHJpbmcgPSBcImNvbS1pbnRlcm5vdmEtZ3RjcGF5bWVudC13ZWItbW9kdWxlLVV0aWxpdGFyaW9cIjtcclxuXHJcbiAgICBHZXRQYXlMb2FkKGFjdGlvbjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsOiBzdHJpbmcgPSBYbWxQYXlMb2Fkcy5pdGVtc1thY3Rpb25dO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlBheWxvYWQgXCIrYWN0aW9uLFwiOlwiLHBsKTsgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHBsICYmIHBsLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShwbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIEdldFhQYXRoUmVzdWx0KHJlc3BvbnNlOiBzdHJpbmcsIGV4cHJlc3Npb246IHN0cmluZywgeHBhdGhOc1Jlc29sdmVyOiBhbnksIHR5cGU6IG51bWJlcik6IFhQYXRoUmVzdWx0IHtcclxuICAgICAgICB2YXIgZG9jID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhyZXNwb25zZSwgJ3RleHQveG1sJyk7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRvYy5ldmFsdWF0ZShleHByZXNzaW9uLCBkb2MsIHhwYXRoTnNSZXNvbHZlciwgdHlwZSwgbnVsbCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBJc01hdGNoKFBsYWluVGV4dDogc3RyaW5nLCBQYXR0ZXJuOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgcmcgPSBuZXcgUmVnRXhwKFBhdHRlcm4pO1xyXG4gICAgICAgIHJldHVybiByZy50ZXN0KFBsYWluVGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgR2V0VmFsdWUoUGxhaW5UZXh0OiBzdHJpbmcsIHJlZ2V4OiBSZWdFeHAsIHBvczogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgcmV0dXJuVmFsdWU6IHN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgbGV0IG07XHJcblxyXG4gICAgICAgIHdoaWxlICgobSA9IHJlZ2V4LmV4ZWMoUGxhaW5UZXh0KSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKG0uaW5kZXggPT09IHJlZ2V4Lmxhc3RJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgcmVnZXgubGFzdEluZGV4Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbS5mb3JFYWNoKChtYXRjaCwgZ3JvdXBJbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGdyb3VwSW5kZXggPT09IHBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gbWF0Y2g7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlXHJcbiAgICB9XHJcblxyXG4gICAgR2V0VmFsdWVzKFBsYWluVGV4dDogc3RyaW5nLCByZWdleDogUmVnRXhwLCBwb3M6IG51bWJlcik6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgICAgIGxldCB2YWx1ZXMgPSBbXTtcclxuICAgICAgICBsZXQgbTtcclxuXHJcbiAgICAgICAgd2hpbGUgKChtID0gcmVnZXguZXhlYyhQbGFpblRleHQpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAobS5pbmRleCA9PT0gcmVnZXgubGFzdEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICByZWdleC5sYXN0SW5kZXgrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtLmZvckVhY2goKG1hdGNoLCBncm91cEluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBJbmRleCA9PT0gcG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2gobWF0Y2gpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcclxuICAgIH1cclxuXHJcbiAgICBSZW1vdmVOYW1lU3BhY2UocmVxdWVzdDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXF1ZXN0ID0gcmVxdWVzdC5yZXBsYWNlKC94bWxucz1cXFwiKC4qPylcXFwiL2csICcnKTtcclxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgIH1cclxuXHJcbiAgICBHZXRQYXlMb2FkSW5mbyhhY3Rpb246IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBnZXRTZXJ2aWNlKEV4dGVybmFsU2VydmljZSkuc2VuZFJlcXVlc3QoJ0dFVCcsIGFjdGlvbilcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Vyci5zdGF0dXNUZXh0OicsIGVyci5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgU3RyaW5nVG9YbWwoc3RyWE1MOiBzdHJpbmcpOiBEb2N1bWVudCB7XHJcbiAgICAgICAgdmFyIGRvYyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoc3RyWE1MLCBcInRleHQveG1sXCIpO1xyXG4gICAgICAgIHJldHVybiBkb2M7XHJcbiAgICB9XHJcblxyXG4gICAgRG9jdW1lbnRUb1N0cmluZyhkb2N1bWVudDogRG9jdW1lbnQpOiBzdHJpbmcge1xyXG4gICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IG5ldyBYTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcoZG9jdW1lbnQpXHJcbiAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xyXG4gICAgfVxyXG5cclxufSJdLCJzb3VyY2VSb290IjoiIn0= 